# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Style Checker/Linter/Tests

on:
  # push:
  #   branches:
  #   - master
  #   - next
  pull_request:
jobs:
  build:
    # Ignore draft-prs
    if: github.event.pull_request.draft == false

    # Sets OS environment
    runs-on: ubuntu-latest

    steps:

    # Checkouts into our repository
    - uses: actions/checkout@v2

    # Gathers only modified files on the PR or before/after hashes for pushes
    - name: Gather Added/Modified Files
      run: |
        git fetch origin
        git branch -r
        AFTER_HASH=${{ github.event.pull_request.head.sha }}
        BEFORE_HASH=${{ github.event.pull_request.base.sha }}
        if [ $AFTER_HASH == "" ]
        then
            AFTER_HASH=github.event.push.after
        fi
        if [ $BEFORE_HASH == "" ]
        then
            BEFORE_HASH=github.event.push.before
        fi

        AFTER_HASH=${{ github.event.pull_request.head.sha }}
        BEFORE_HASH=${{ github.event.pull_request.base.sha }}
        FILES_ADDED_MODIFIED=$(git diff --name-only --diff-filter=b $(git merge-base $AFTER_HASH $BEFORE_HASH))
        echo $FILES_ADDED_MODIFIED
        ENV_FILES_CMD="FILES_ADDED_MODIFIED=$FILES_ADDED_MODIFIED"
        echo $ENV_FILES_CMD >> $GITHUB_ENV
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
    - name: Black Check
      run: |
        set -eax
        black --version
        ADDED_MODIFIED_FILES='${{ env.FILES_ADDED_MODIFIED }}'
        PYTHON_ADDED_MODIFIED="$(ls $ADDED_MODIFIED_FILES | grep -E '\.py$' || true)"
        if [ "$PYTHON_ADDED_MODIFIED" != "" ]
        then
          echo "Running black for $PYTHON_ADDED_MODIFIED"
          black $PYTHON_ADDED_MODIFIED --check
        fi
    - name: Setup flake8 annotations
      uses: rbialon/flake8-annotations@v1
    - name: Lint with flake8
      shell: bash
      run: |
        ADDED_MODIFIED_FILES='${{ env.FILES_ADDED_MODIFIED }}'
        PYTHON_ADDED_MODIFIED="$(ls $ADDED_MODIFIED_FILES | grep -E '\.py$' || true)"
        if [ "$PYTHON_ADDED_MODIFIED" != "" ]
        then
          echo "Running flake8 for $PYTHON_ADDED_MODIFIED"
          # stop the build if there are Python syntax errors or undefined names
          flake8 $PYTHON_ADDED_MODIFIED --count --select=E9,F63,F7,F82 --show-source --statistics
          # output warnnings
          flake8 $PYTHON_ADDED_MODIFIED --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        fi
    - name: Test with pytest
      run: |
        pytest